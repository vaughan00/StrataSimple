"""
Script to export database schema as SQL statements using SQLAlchemy.
This creates SQL statements that can be run to recreate the schema.
"""
import os
import datetime
from app import app, db
from sqlalchemy import inspect, MetaData, Table
from sqlalchemy.schema import CreateTable, ForeignKeyConstraint, PrimaryKeyConstraint

def export_schema():
    """Export database schema as SQL CREATE TABLE statements."""
    with app.app_context():
        # Create backup directory if it doesn't exist
        backup_dir = 'db_backups'
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        # Generate filename with timestamp
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        schema_file = f"{backup_dir}/schema_{timestamp}.sql"
        latest_file = f"{backup_dir}/latest_schema.sql"
        
        try:
            # Open the schema file for writing
            with open(schema_file, 'w') as f:
                f.write("-- Database Schema generated by sql_schema_export.py\n")
                f.write(f"-- Generated at: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                # Get metadata
                metadata = MetaData()
                metadata.reflect(bind=db.engine)
                
                # Sort tables by dependencies
                sorted_tables = metadata.sorted_tables
                
                # First, drop all foreign key constraints
                f.write("-- Disable foreign key constraints during import\n")
                f.write("SET session_replication_role = 'replica';\n\n")
                
                # Drop statements (useful for rebuilding)
                f.write("-- Drop tables if they exist (for rebuilding)\n")
                for table in reversed(sorted_tables):
                    f.write(f"DROP TABLE IF EXISTS {table.name} CASCADE;\n")
                f.write("\n")
                
                # Create tables
                f.write("-- Create tables\n")
                for table in sorted_tables:
                    # Get CreateTable construct
                    create_table = CreateTable(table)
                    create_sql = str(create_table.compile(dialect=db.engine.dialect)).strip()
                    
                    # Add to file
                    f.write(f"{create_sql};\n\n")
                
                # Re-enable foreign keys
                f.write("-- Re-enable foreign key constraints\n")
                f.write("SET session_replication_role = 'origin';\n")
            
            # Create a copy as latest_schema.sql
            with open(schema_file, 'r') as src, open(latest_file, 'w') as dst:
                dst.write(src.read())
            
            print(f"Schema exported to {schema_file} and {latest_file}")
            return True
            
        except Exception as e:
            print(f"Error exporting schema: {e}")
            return False

if __name__ == "__main__":
    export_schema()